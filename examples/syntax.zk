// This is a single-line comment

/*
  This is a multi-line comment
*/

// Use built-in libraries
use math;
use { read_file, write_file } from fs;

// Include exported values from other files
include "file.zk";
include { variable1, variable2 } from "file.zk";

// Different variable data types | let/const variable keywords
let x: int = 45;
const y: float = 3.14;
let z: bool = true;
const w: string = "Hello, World!";
let a: arr = [1, 2, 3];
const b: obj = { hello: "Hello", world: "World!" };

// Export values
export x, y, z, w, a, b;

// Functions
func add |a: int, b: int| {
  return a + b;
}

// Lambda Functions
let sub: fn -> |a: int, b: int| {
  return a - b;
};

// Setting the value of a variable to the return value of a func
let result_1: int = add => |1, 2|;
let result_2: int = sub => |2, 1|;

// Printing the result to the console
@println => |"Add: " + result_1, "Sub: " + result_2|

// If statements
if x == 45 {
  @println => |"X equals 45"|
} else if x < 45 {
  @println => |"X is less than 45"|
} else if x > 45 {
  @println => |"X is greater than 45"|
}

// For-loop
for |key, value| in b {
  @println => |key + ": " + value|
}

// While-loop
while x > 0 {
  @println => |x|
  x -= 1
}

// Try-Catch statements
try {
  x + 12
} catch |e| {
  @println => |"Error: " + e|
}

// User input
let input: string = @input => |"Enter your name: "|;
@println => |"Hello, " + input + "!"|

// File I/O
// Read and write to a file
let data: string = read_file => |"data.txt"|; // Iniially contains "this is some text"
@println => |data| // output: this is some text

write_file => |"data.txt", "this is some more text"| // Overwrite the file with new content

data = read_file => |"data.txt"| // Read the file again
@println => |data| // output: this is some more text